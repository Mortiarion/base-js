// Типи умовних конструкцій в JavaScript
// 1. if...else
// Це найпоширеніша умовна конструкція.Використовується для 
// перевірки умови: якщо вона істинна(true), виконується код 
// у блоці if, інакше — в блоці else.

// Синтаксис:
//if (умова) {
  // Код виконається, якщо умова true
//} else {
  // Код виконається, якщо умова false
//}
// Приклад:
let age = 20;

if (age >= 18) {
  console.log("Ви дорослий");
} else {
  console.log("Ви ще дитина");
}
// 2. if...else if...else
// Використовується для перевірки декількох умов 
// послідовно.Якщо одна з умов виконується(true), 
// виконується відповідний блок.

// Синтаксис:
//if (умова1) {
  // Виконується, якщо умова1 true
//} else if (умова2) {
  // Виконується, якщо умова1 false, а умова2 true
//} else {
  // Виконується, якщо всі умови false
//}
// Приклад:
let score = 85;

if (score >= 90) {
  console.log("Ваша оцінка: A");
} else if (score >= 75) {
  console.log("Ваша оцінка: B");
} else {
  console.log("Ваша оцінка: C");
}
// 3. Тернарний оператор (?)
// Компактна альтернатива if...else. Він є оператором, а не 
// конструкцією, але часто використовується для умов.

// Синтаксис:
// умова ? значення_якщо_true : значення_якщо_false;
// Приклад:
let message = age >= 18 ? "Дорослий" : "Дитина";
console.log(message); // "Дорослий"
// 4. switch
// Ця конструкція використовується, коли потрібно порівняти 
// одне значення з кількома варіантами(кейсами).Зручно замінює 
// довгі ланцюжки else if.

// Синтаксис:
//switch (значення) {
//  case варіант1:
//    // Код виконається, якщо значення === варіант1
//    break;
//  case варіант2:
//    // Код виконається, якщо значення === варіант2
//    break;
//  default:
//    // Код виконається, якщо жоден варіант не підійшов
//}
// Приклад:
let day = 3;

switch (day) {
  case 1:
    console.log("Понеділок");
    break;
  case 2:
    console.log("Вівторок");
    break;
  case 3:
    console.log("Середа");
    break;
  default:
    console.log("Невідомий день");
}
// 5. Логічні оператори в умовних конструкціях
// Умови можуть об'єднуватися логічними операторами для
// створення складніших умов.

// Приклад:
let hasLicense = true;

if (age >= 18 && hasLicense) {
  console.log("Ви можете водити");
} else {
  console.log("Ви не можете водити");
}
// 6. Умови без else
// Блок else не є обов'язковим. Можна використовувати 
// лише if, якщо немає дій для виконання при false.

// Приклад:
let isSunny = true;

if (isSunny) {
  console.log("Виходьте на прогулянку");
}
// 7. Вкладені if
// if може бути вкладений в інший if, що дозволяє створювати 
// багаторівневі перевірки.

// Приклад:

if (age >= 18) {
  if (hasLicense) {
    console.log("Ви можете водити");
  } else {
    console.log("Вам потрібні права");
  }
} else {
  console.log("Ви занадто молоді для водіння");
}
// 8. Раннє завершення з return
// У функціях замість if...else можна використовувати 
// раннє завершення з return.

//Приклад:
function checkAge(age) {
  if (age < 18) {
    return "Дитина";
  }
  return "Дорослий";
}

console.log(checkAge(20)); // "Дорослий"
// ХОРОША ПРАКТИКА:
// Використовуйте switch, якщо є багато варіантів для одного значення.
// Не ускладнюй умови: простіше зрозумілий код краще підтримувати.
// Логічні оператори (&&, ||) можуть зробити умови коротшими.
// Для простих умов використовуйте тернарний оператор (?), але не зловживайте.