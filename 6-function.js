// Функції — це одна з основних концепцій програмування в
// JavaScript.Вони дозволяють інкапсулювати код, який можна
// викликати кілька разів, що робить програму чистішою,
// гнучкішою і зручнішою для підтримки.Давай розглянемо все,
// що можна сказати про функції в JavaScript.

// 1. Оголошення функцій
// 1.1. Функція за допомогою function
// Це традиційний спосіб оголошення функцій у JavaScript.

function greet(name) {
    console.log(`Привіт, ${name}!`);
}

greet("Іван"); // Виведе: Привіт, Іван!

// Технічні моменти:

// Функцію можна викликати до її оголошення, завдяки hoisting
// (підняттю).
// Параметри передаються через дужки.
// Функція може нічого не повертати, або повертати значення
// через return.
// 1.2. Функція як вираз (Function Expression)
// Функцію можна оголосити як частину виразу, призначивши її
// змінній.

const greets = function (name) {
    console.log(`Привіт, ${name}!`);
};

greets("Марія"); // Виведе: Привіт, Марія!
// Технічні моменти:

// function expression не піднімається, тому функцію
// потрібно оголосити перед викликом.
// Функція є анонімною, тобто не має імені.
// 1.3. Стрілкові функції (Arrow Functions)
// Це коротший синтаксис для оголошення функцій,
// особливо корисний для функцій, що мають лише
// одну стрічку коду.

const greett = (name) => {
    console.log(`Привіт, ${name}!`);
};

greett("Олег"); // Виведе: Привіт, Олег!
// Технічні моменти:
// Стрілкові функції не мають свого контексту this.
// Вони успадковують this від оточення.
// Якщо функція містить лише одне вираз, можна опустити
// фігурні дужки і return:
const square = (x) => x * x;
console.log(square(5)); // Виведе: 25

// 2. Параметри функцій
// 2.1. Параметри за замовчуванням
// Можна задати значення параметрів за замовчуванням,
// якщо їх не передано при виклику функції.

function greet(name = "Незнайомець") {
    console.log(`Привіт, ${name}!`);
}

greet(); // Виведе: Привіт, Незнайомець!
greet("Іван"); // Виведе: Привіт, Іван!

// 2.2. Rest параметри (...)
// Якщо функція повинна приймати кілька аргументів, можна
// використовувати оператор ... для збору залишкових
// параметрів у масив.

function sum(...numbers) {
    return numbers.reduce((acc, num) => acc + num, 0);
}

console.log(sum(1, 2, 3, 4)); // Виведе: 10
// 2.3. Параметри в функціях (аргументи)
// Функції JavaScript автоматично мають об'єкт arguments,
// який містить всі передані аргументи.

function showArgs() {
    console.log(arguments);
}

showArgs(1, 2, 3); // Виведе: { '0': 1, '1': 2, '2': 3 }

// Технічні моменти:
// arguments доступний лише у звичайних функціях
// (не у стрілкових).
// Використання arguments не є дуже зручним у
// порівнянні з rest - параметрами, оскільки він не є масивом.
// 3. Повернення значень з функцій
// 3.1. Використання return
// Функції можуть повертати значення через ключове слово
// return.Після виконання return, функція припиняє
// своє виконання.

function add(a, b) {
    return a + b;
}

const result = add(2, 3);
console.log(result); // Виведе: 5

// 3.2.Відсутність return
// Якщо функція не має return, вона повертає undefined за
// замовчуванням.

function sayHello() {
    console.log("Привіт!");
}

const result2 = sayHello(); // Виведе: Привіт!
console.log(result2); // Виведе: undefined
// 4. Замикання (Closures)
// Замикання — це функція, яка має доступ до змінних з
// свого лексичного оточення, навіть після того, як
// зовнішня функція завершила виконання.

// Приклад:
function outer() {
    const message = "Привіт!";
    return function inner() {
        console.log(message);
    };
}

const ggreet = outer();
ggreet(); // Виведе: Привіт!

// Технічні моменти:
// Функція inner має доступ до змінної message, навіть коли outer вже виконано. Це і є замиканням.
// 5. Функції в об'єктах
// Функції можна зберігати як властивості об'єкта, і вони будуть доступні через цей об'єкт.

const person = {
    name: "Іван",
    greet() {
        console.log(`Привіт, я ${this.name}!`);
    },
};

person.greet(); // Виведе: Привіт, я Іван!

// 6. Іменовані функції (Named Functions)
// Функції можуть бути також іменованими, що корисно
// для дебагінгу і підвищення зрозумілості коду.

function greetPerson(name) {
    console.log(`Привіт, ${name}!`);
}

greetPerson("Таня"); // Виведе: Привіт, Таня!

// 7. Виклик функцій з іншого контексту (bind, call, apply)
// call() і apply() дозволяють викликати функцію з певним
// значенням this і передати аргументи.
// bind() створює нову функцію з певним значенням this.
// Приклад:
function greet() {
    console.log(`Привіт, ${this.name}!`);
}

const person2 = { name: "Іван" };

greet.call(person2); // Виведе: Привіт, Іван!
greet.apply(person2); // Виведе: Привіт, Іван!

const greetPersonn = greet.bind(person);
greetPersonn(); // Виведе: Привіт, Іван!

// 8. Рекурсія
// Рекурсія — це коли функція викликає саму себе.
// Важливо мати умову завершення, щоб не виникала
// нескінченна рекурсія.

function factorial(n) {
    if (n === 0) return 1;
    return n * factorial(n - 1);
}

console.log(factorial(5)); // Виведе: 120
